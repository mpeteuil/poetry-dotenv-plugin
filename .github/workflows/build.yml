name: "CI"
on:
  push:
    branches:
      - main
      - continuous-integration
  pull_request:
    branches:
      - '**'


# 1. Run script that installs the versions of poetry-dotenv-plugin on this branch:
#     Ex. poetry plugin add git+https://github.com/mpeteuil/poetry-plugin-dotenv.git#PR_BRANCH
# 2.

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS]
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        shell: bash
        run: curl -sL https://raw.githubusercontent.com/python-poetry/poetry/1.2.0a1/install-poetry.py | python - -y --preview

      - name: Update PATH
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install --no-root

      - name: Install poetry-dotenv-plugin
        shell: bash
        run: poetry plugin add poetry-dotenv-plugin

      # - name: Setup .env test file
      #   shell: bash
      #   run: echo "export MY_ENV_VAR='Hello World'" > "$GITHUB_WORKSPACE/.env"

      # - name: Run pytest
      #   shell: bash
      #   run: poetry run pytest -m system

      - name: Run system test
        shell: bash
        run: tests/test_system.sh
